# name: Deploy Dockerized App to Azure ACR and VM
# on:
#   push:
#     branches:
#       - main # Trigger the workflow on pushes to the 'main' branch

# jobs:
#   build-and-deploy:
#     runs-on: self-hosted # Use your self-hosted runner
#     steps:
#       # Checkout the code
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       # Login to Azure Container Registry
#       - name: Azure Container Registry Login
#         run: |
#           az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
#           az acr login --name testregistry2402

#       # Set up Docker Buildx for better build performance
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       # Build and Push Backend Image
#       - name: Build and Push Backend Image
#         run: |
#           docker build -t testregistry2402.azurecr.io/my-website-backend:latest ./backend
#           docker push testregistry2402.azurecr.io/my-website-backend:latest

#       # Build and Push Frontend Image
#       - name: Build and Push Frontend Image
#         run: |
#           docker build -t testregistry2402.azurecr.io/my-website-frontend:latest ./frontend
#           docker push testregistry2402.azurecr.io/my-website-frontend:latest

#       # Stop and remove existing containers
#       - name: Stop Existing Containers
#         run: |
#           docker stop my-website-backend || true
#           docker rm my-website-backend || true
#           docker stop my-website-frontend || true
#           docker rm my-website-frontend || true

#       # Pull and Run Containers from ACR
#       - name: Pull and Run Containers
#         run: |
#           # Pull images from ACR
#           docker pull testregistry2402.azurecr.io/my-website-backend:latest
#           docker pull testregistry2402.azurecr.io/my-website-frontend:latest

#           # Run backend container
#           docker run -d \
#             --name my-website-backend \
#             --network my-app-network \
#             -p 3000:3000 \
#             testregistry2402.azurecr.io/my-website-backend:latest

#           # Run frontend container
#           docker run -d \
#             --name my-website-frontend \
#             --network my-app-network \
#             -p 8080:80 \
#             testregistry2402.azurecr.io/my-website-frontend:latest

name: Deploy to Azure VM
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use GitHub-hosted runner for build
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry
      - name: Azure Container Registry Login
        run: |
          az acr login --name testregistry2402

      # Build and Push Backend Image
      - name: Build and Push Backend Image
        run: |
          docker build -t testregistry2402.azurecr.io/my-website-backend:latest ./backend
          docker push testregistry2402.azurecr.io/my-website-backend:latest

      # Build and Push Frontend Image
      - name: Build and Push Frontend Image
        run: |
          docker build -t testregistry2402.azurecr.io/my-website-frontend:latest ./frontend
          docker push testregistry2402.azurecr.io/my-website-frontend:latest

      # Deploy to Azure VM
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          remote-host: ${{ secrets.VM_HOST }}
          remote-user: azureuser
          script: |
            # Login to Azure Container Registry
            az acr login --name testregistry2402

            # Pull latest images
            docker pull testregistry2402.azurecr.io/my-website-backend:latest
            docker pull testregistry2402.azurecr.io/my-website-frontend:latest

            # Stop existing containers
            docker stop my-website-backend || true
            docker rm my-website-backend || true
            docker stop my-website-frontend || true
            docker rm my-website-frontend || true

            # Run new containers
            docker run -d \
              --name my-website-backend \
              --network my-app-network \
              -p 3000:3000 \
              testregistry2402.azurecr.io/my-website-backend:latest

            docker run -d \
              --name my-website-frontend \
              --network my-app-network \
              -p 8080:80 \
              testregistry2402.azurecr.io/my-website-frontend:latest