name: Deploy to Azure VM
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Start SonarQube Container
      - name: Start SonarQube Container
        run: |
          docker network inspect sonarqube_network >/dev/null 2>&1 || \
          docker network create sonarqube_network

          docker run -d --name postgres \
            --network sonarqube_network \
            -e POSTGRES_USER=sonar \
            -e POSTGRES_PASSWORD=sonar \
            -e POSTGRES_DB=sonarqube \
            postgres:latest

          docker run -d --name sonarqube \
            --network sonarqube_network \
            -p 9000:9000 \
            -e SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube \
            -e SONAR_JDBC_USERNAME=sonar \
            -e SONAR_JDBC_PASSWORD=sonar \
            sonarqube:community

      # Wait for SonarQube to start
      - name: Wait for SonarQube
        run: |
          until curl -s http://74.225.248.0:9000/api/system/status | grep -q '"status":"UP"'; do
            echo "Waiting for SonarQube to start..."
            sleep 5
          done

      # SonarQube Analysis
      - name: Run SonarQube Analysis
        run: |
          curl -u admin:admin -X POST "http://74.225.248.0:9000/api/projects/create?name=my-website&project=my-website"

          docker run --rm \
            --network sonarqube_network \
            -v ${{ github.workspace }}:/usr/src \
            sonarsource/sonar-scanner-cli \
            -Dsonar.projectKey=my-website \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://sonarqube:9000 \
            -Dsonar.login=admin \
            -Dsonar.password=admin

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to Azure Container Registry
      - name: Azure Container Registry Login
        run: |
          az acr login --name testregistry2402

      # Build and Push Backend Image
      - name: Build and Push Backend Image
        run: |
          docker build -t testregistry2402.azurecr.io/my-website-backend:latest ./backend
          docker push testregistry2402.azurecr.io/my-website-backend:latest

      # Build and Push Frontend Image
      - name: Build and Push Frontend Image
        run: |
          docker build -t testregistry2402.azurecr.io/my-website-frontend:latest ./frontend
          docker push testregistry2402.azurecr.io/my-website-frontend:latest

      # Deploy to Azure VM
      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          host: ${{ secrets.VM_HOST }}
          username: azureuser
          script: |
            # Login to Azure Container Registry
            az acr login --name testregistry2402

            # Pull latest images
            docker pull testregistry2402.azurecr.io/my-website-backend:latest
            docker pull testregistry2402.azurecr.io/my-website-frontend:latest

            docker network inspect my-app-network >/dev/null 2>&1 || \
            docker network create my-app-network

            # Run new containers
            docker run -d \
              --name my-website-backend-azure-image \
              --network my-app-network \
              -p 3000:3000 \
              testregistry2402.azurecr.io/my-website-backend:latest

            docker run -d \
              --name my-website-frontend-azure-image \
              --network my-app-network \
              -p 8080:80 \
              testregistry2402.azurecr.io/my-website-frontend:latest
